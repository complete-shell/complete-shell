.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "January 2019" "Generated by Swim v0.1.46" "Modern Tab Completion Everywhere"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
complete-shell \- Modern Tab Completion Everywhere
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&    # Install the complete\-shell software:
\&    git clone https://github.com/complete\-shell/complete\-shell
\&    source /path/to/complete\-shell/.rc
\&
\&    # Try tab completion:
\&    complete\-shell <tab><tab>
\&
\&    # Search for existing complete\-shell packages:
\&    complete\-shell search
\&
\&    # Install the packages you like:
\&    complete\-shell install this\-cmd
\&    complete\-shell install another\-cmd
\&
\&    this\-cmd <TAB><TAB>  # Completion should work!
\&
\&    # Write your own compdef files. (See below)
\&    # Add your compdef files:
\&    complete\-shell add ./src/foo.comp
\&
\&    # Learn the other complete\-shell commands:
\&    complete\-shell \-h     # Quick reference
\&    complete\-shell help   # Complete documentation
.Ve
.SH "Status"
.IX Header "Status"
\&\s-1WARNING: THIS FRAMEWORK IS VERY NEW.\s0
.IP "\(bu" 4
Only works on Bash so far
.IP "\(bu" 4
Only tested on Mac and Ubuntu Linux so far
.PP
Pull Requests welcome!
.SH "Description"
.IX Header "Description"
CompleteShell adds command completion for everything, everywhere. It provides a framework to define command completion in a simple, single file format.
.PP
CompleteShell works in:
.IP "\(bu" 4
Bash
.IP "\(bu" 4
zsh (coming soon)
.IP "\(bu" 4
Fish (coming soon)
.PP
People can easily write complete-shell files for commands that don't yet have completion and share them with the world. They can also write their own custom files, or fine tune existing ones to their liking.
.SH "Installation"
.IX Header "Installation"
Run these commands:
.PP
.Vb 2
\&    # clone the Git repo:
\&    git clone https://github.com/complete\-shell/complete\-shell
\&
\&    # \`source\` the \`.rc\` file in your shell startup configuration file:
\&    source /path/to/complete\-shell/.rc
.Ve
.PP
That's it!
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "Bash 3.2+" 4
.IX Item "Bash 3.2+"
Even if you don't use Bash as your shell, \f(CW\*(C`complete\-shell\*(C'\fR needs it because it is written in Bash. Fortunately most computers have Bash 3.2+ installed.
.IP "Git" 4
.IX Item "Git"
Git is used for getting compdef repos to install and also is used for its (totally awesome) command line options parsing facility.
.IP "Completion Subsystem" 4
.IX Item "Completion Subsystem"
CompleteShell attempts to fit into your Shell's existing Completion system.
.Sp
For Bash, there is system that almost everyone uses. It can usually be found in \f(CW\*(C`/usr/share/bash\-completion/\*(C'\fR or \f(CW\*(C`/etc/bash_completion*\*(C'\fR (older systems and Mac). CompleteShell will check to make sure this subsystem is in place.
.Sp
For Zsh and Fish, completion facitities are first class parts of the shell. CompleteShell will compile to code that fits right in.
.SH "Commands"
.IX Header "Commands"
.ie n .IP """complete\-shell help""" 4
.el .IP "\f(CWcomplete\-shell help\fR" 4
.IX Item "complete-shell help"
Display the complete-shell manpage. Same as \f(CW\*(C`man complete\-shell\*(C'\fR.
.Sp
The \f(CW\*(C`\-h\*(C'\fR option will display a quick reference help guide.
.ie n .IP """complete\-shell search [<search string>]""" 4
.el .IP "\f(CWcomplete\-shell search [<search string>]\fR" 4
.IX Item "complete-shell search [<search string>]"
Find registered completion packages that are available online.
.ie n .IP """complete\-shell list""" 4
.el .IP "\f(CWcomplete\-shell list\fR" 4
.IX Item "complete-shell list"
List all your installed completion packages.
.ie n .IP """complete\-shell show <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell show <compdef\-name>\fR" 4
.IX Item "complete-shell show <compdef-name>"
Show information about a completion definition.
.ie n .IP """complete\-shell install <package>""" 4
.el .IP "\f(CWcomplete\-shell install <package>\fR" 4
.IX Item "complete-shell install <package>"
Installs compdef files from git repos online. You can find these repos using the \f(CW\*(C`search\*(C'\fR command or use other ones that you know about. \f(CW\*(C`compdef\-target\*(C'\fR can be a simple name (found in search) or a git repo \s-1URL.\s0
.ie n .IP """complete\-shell add <compdef\-filepath>""" 4
.el .IP "\f(CWcomplete\-shell add <compdef\-filepath>\fR" 4
.IX Item "complete-shell add <compdef-filepath>"
Adds a local compdef file path to your config. It will be enabled by default.
.ie n .IP """complete\-shell delete <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell delete <compdef\-name>\fR" 4
.IX Item "complete-shell delete <compdef-name>"
Delete a compdef file from your configuration.
.ie n .IP """complete\-shell disable <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell disable <compdef\-name>\fR" 4
.IX Item "complete-shell disable <compdef-name>"
Disable a compdef (but don't delete it). Use this to turn of a specific command completion temporarily. Use the \f(CW\*(C`enable\*(C'\fR command to turn it back on.
.ie n .IP """complete\-shell enable <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell enable <compdef\-name>\fR" 4
.IX Item "complete-shell enable <compdef-name>"
Enable a compdef. Usually only after you have disabled it.
.ie n .IP """complete\-shell update <compdef\-name>""" 4
.el .IP "\f(CWcomplete\-shell update <compdef\-name>\fR" 4
.IX Item "complete-shell update <compdef-name>"
Update specific compdef to their latest version.
.ie n .IP """complete\-shell upgrade""" 4
.el .IP "\f(CWcomplete\-shell upgrade\fR" 4
.IX Item "complete-shell upgrade"
Upgrade your \f(CW\*(C`complete\-shell\*(C'\fR installation to the latest version.
.ie n .IP """complete\-shell compile <compdef\-name\-or\-path>""" 4
.el .IP "\f(CWcomplete\-shell compile <compdef\-name\-or\-path>\fR" 4
.IX Item "complete-shell compile <compdef-name-or-path>"
Compdef files are themselves valid shell files. (A common subset of Bash, Zsh and Fish!). They get compiled into leaner shell-specific files that are tuned for the tab completion facilities of the particular shell.
.IP "`complete\-shell alias <compdef\-name> <alias\-name>" 4
.IX Item "`complete-shell alias <compdef-name> <alias-name>"
This command will create an alias completion for an existing alias of a command.  command completion. Try making the alias \f(CW\*(C`cs\*(C'\fR for the command \f(CW\*(C`complete\-shell\*(C'\fR:
.Sp
.Vb 2
\&    alias cs=complete\-shell
\&    complete\-shell alias complete\-shell cs
.Ve
.ie n .SH "The ""compdef"" File"
.el .SH "The \f(CWcompdef\fP File"
.IX Header "The compdef File"
A complete-shell \*(L"command completion definition\*(R" (\*(L"compdef\*(R" for short) file is a minimal \s-1DSL\s0 that allows people to specify how command completion should work for a given command:
.PP
Here is a simple example. Define a file called \f(CW\*(C`foo.comp\*(C'\fR:
.PP
.Vb 2
\&    # Required header declaring the API version:
\&    CompleteShell v0.2
\&
\&    # Command name:
\&    N foo     ..The mighty foo CLI
\&
\&    # Command options:
\&    O \-\-aaa   ..The aaa option
\&    O \-\-bbb =file \e
\&              ..The bbb option
\&
\&    # Sub\-commands:
\&    C bar +str            ..Do the bar
\&    C baz +num +dir       ..Do the baz
.Ve
.PP
Then run:
.PP
.Vb 1
\&    complete\-shell add foo.comp
.Ve
.PP
Now you have command completion for the \f(CW\*(C`foo\*(C'\fR command!
.PP
The \f(CW\*(C`complete\-shell\*(C'\fR command itself comes with a compdef file that you can find in \f(CW\*(C`/path/to/complete\-shell/share/complete\-shell.comp\*(C'\fR.
.SS "compdef File Guidelines"
.IX Subsection "compdef File Guidelines"
.IP "\(bu" 4
compdef files are named \f(CW\*(C`<name>.comp\*(C'\fR
.IP "\(bu" 4
The name should be either:
.RS 4
.IP "\(bu" 4
The name of the \s-1CLI\s0 command for which it adds support
.IP "\(bu" 4
The name of a project that has multiple commands
.RE
.RS 4
.RE
.IP "\(bu" 4
Shell specific functions go in \f(CW\*(C`<name>.<shell>\*(C'\fR
.RS 4
.IP "\(bu" 4
Bash uses \f(CW\*(C`<name>.bash\*(C'\fR or \f(CW\*(C`<name>.sh\*(C'\fR
.IP "\(bu" 4
Zsh uses \f(CW\*(C`<name>.zsh\*(C'\fR or \f(CW\*(C`<name>.sh\*(C'\fR
.IP "\(bu" 4
Fish uses \f(CW\*(C`<name>.fish\*(C'\fR
.IP "\(bu" 4
A \f(CW\*(C`<name>.sh\*(C'\fR is \s-1POSIX\s0 shell code that works in Bash or Zsh
.RE
.RS 4
.RE
.IP "\(bu" 4
A compdef file can define completions for one or more commands
.IP "\(bu" 4
A compdef Git repo contains one or more comdef files
.RS 4
.IP "\(bu" 4
A set of compdef files is called a package
.RE
.RS 4
.RE
.IP "\(bu" 4
A compdef file uses the syntax described in the next section
.ie n .SS "The ""compdef"" Language"
.el .SS "The \f(CWcompdef\fP Language"
.IX Subsection "The compdef Language"
The compdef files are written in a simple \s-1DSL.\s0 The \s-1DSL\s0 has a set of simple commands that are usually a single capital letter. Blank lines and \f(CW\*(C`#\*(C'\fR comments are supported.
.PP
The \s-1DSL\s0 happens to a common subset of the Bash, Zsh and Fish shell languages, but compdef files should not contain any statements that are not documented by the \s-1DSL.\s0
.PP
The \s-1DSL\s0 is versioned and can change over time. It is designed to be forward and backward compatible. ie People can use compdef files of any \s-1DSL\s0 version, and authors can not worry about their compdefs breaking with future \f(CW\*(C`complete\-shell\*(C'\fR releases. Users \fBwill\fR need to upgrade \f(CW\*(C`complete\-shell\*(C'\fR to at least the version of the most modern compdef file's \s-1API\s0 version that they want to use.
.ie n .SS "The ""compdef"" v0.2 Syntax"
.el .SS "The \f(CWcompdef\fP v0.2 Syntax"
.IX Subsection "The compdef v0.2 Syntax"
A compdef files consists of comments, blank lines and single-line command statements.
.PP
This is a list of the compdef statement commands:
.ie n .IP """CompleteShell v0.2""" 4
.el .IP "\f(CWCompleteShell v0.2\fR" 4
.IX Item "CompleteShell v0.2"
The first statement in every compdef file must be \f(CW\*(C`CompleteShell\*(C'\fR and must have a version argument as shown above. The version is used to invoke the appropriate compiler and runtime for that file.
.ie n .IP """N <name>""" 4
.el .IP "\f(CWN <name>\fR" 4
.IX Item "N <name>"
The name of the statement for which completion is being defined. This is the second statement in the file. All other statement apply to this \f(CW\*(C`name\*(C'\fR until the end of file or another \f(CW\*(C`N\*(C'\fR command starts a new definition.
.ie n .IP """O <\-\-option>""" 4
.el .IP "\f(CWO <\-\-option>\fR" 4
.IX Item "O <--option>"
This defines an option that applies to the \s-1CLI\s0 command. \f(CW\*(C`O\*(C'\fR is also used to define options that are specific to a sub-command (when they follow the sub-command's \f(CW\*(C`C\*(C'\fR command).
.ie n .IP """A <+arg\-type>...""" 4
.el .IP "\f(CWA <+arg\-type>...\fR" 4
.IX Item "A <+arg-type>..."
This defines the arguments and their types. An arg type always starts with a \f(CW\*(C`+\*(C'\fR character. For example, \f(CW\*(C`+file\-path\*(C'\fR called a function named \f(CW\*(C`file\-path\*(C'\fR to list the completions that can happen for that argument. \f(CW\*(C`A\*(C'\fR can be used for a normal command, or for sub-commands.
.ie n .IP """C <subcommand name>""" 4
.el .IP "\f(CWC <subcommand name>\fR" 4
.IX Item "C <subcommand name>"
This defines a subcommand that applies to the \s-1CLI\s0 command.
.ie n .IP """V @<var\-name> = <set of command words>""" 4
.el .IP "\f(CWV @<var\-name> = <set of command words>\fR" 4
.IX Item "V @<var-name> = <set of command words>"
For the purposes of reusing common definitions, \f(CW\*(C`V\*(C'\fR lets you define variables. The variables always begin with a \f(CW\*(C`@\*(C'\fR.
.ie n .SS "Sharing ""compdef"" Files"
.el .SS "Sharing \f(CWcompdef\fP Files"
.IX Subsection "Sharing compdef Files"
Sharing compdef files is simple. Create a Git repo for your compdef files:
.PP
.Vb 3
\&    ReadMe          # Describe your repo
\&    foo.comp        # compdef for the foo command
\&    bars.comp       # compdef for the bar commands
.Ve
.PP
Then push it to a public Git host, like GitHub or BitBucket.
.PP
If you want it to be found in the \f(CW\*(C`complete\-shell search\*(C'\fR command, then register it with complete-shell:
.IP "\(bu" 4
Fork/clone <https://github.com/complete\-shell/complete\-shell>
.IP "\(bu" 4
Add your repo to the \f(CW\*(C`share/search\-index.tsv\*(C'\fR file
.IP "\(bu" 4
Commit and push
.IP "\(bu" 4
Create a GitHub Pull Request
.SH "Copyright and License"
.IX Header "Copyright and License"
Copyright 2019. Ingy döt Net <ingy@ingy.net>.
.PP
CompleteShell is released under the \s-1MIT\s0 license.
.PP
See the file \s-1LICENSE\s0 for more details.
